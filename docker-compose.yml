services:
    nginx:
        build:
            context: .
            dockerfile: ./_docker/images/nginx/Dockerfile
        container_name: sbi_nginx
        volumes:
            - ./_docker/images/nginx/conf.d/localhost:/etc/nginx/conf.d/
            - ./:/var/www/backend/
            - nginx_data:/etc/nginx
            - nginx_logs:/var/log/nginx
        ports:
            - "8000:80"
        restart: always
        networks:
            - sbi_network

    php:
        build:
            context: .
            dockerfile: ./_docker/images/php/Dockerfile
        container_name: sbi_php
        volumes:
            - ./:/var/www/backend/
        restart: always
        depends_on:
            - nginx
        networks:
            - sbi_network

    postgres:
        image: postgres:latest
        container_name: sbi_postgres
        environment:
            POSTGRES_USER: ${DB_USERNAME}
            POSTGRES_PASSWORD: ${DB_PASSWORD}
            POSTGRES_DB: ${DB_DATABASE}
        ports:
            - "5432:5432"
        restart: always
        volumes:
            - postgres_data:/var/lib/postgresql/data
        networks:
            - sbi_network

    pgadmin:
        image: dpage/pgadmin4
        container_name: sbi_pgadmin
        environment:
            PGADMIN_DEFAULT_EMAIL: admin@test.uz
            PGADMIN_DEFAULT_PASSWORD: 123456
        ports:
            - "8080:80"
        restart: always
        volumes:
            - pgadmin_data:/var/lib/pgadmin
        depends_on:
            - postgres
        networks:
            - sbi_network

    redis:
        image: redis:latest
        container_name: sbi_redis
        command: [ "sh", "-c", "redis-server --requirepass $${REDIS_PASSWORD}" ]
        restart: always
        ports:
            - "6379:6379"
        volumes:
            - redis_data:/data
        environment:
            REDIS_PASSWORD: ${REDIS_PASSWORD}
        networks:
            - sbi_network

    queue:
        build:
            context: .
            dockerfile: ./_docker/images/php/Dockerfile
        container_name: sbi_queue
        command: php artisan queue:work --verbose --tries=3 --timeout=90
        volumes:
            - ./:/var/www/backend/
        networks:
            - sbi_network
        depends_on:
            - php
            - redis
        restart: unless-stopped

volumes:
    nginx_data:
        driver: local
    nginx_logs:
        driver: local
    postgres_data:
        driver: local
    redis_data:
        driver: local
    pgadmin_data:
        driver: local

networks:
    sbi_network:
        driver: bridge
